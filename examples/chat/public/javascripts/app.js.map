{"version":3,"sources":["app/actions/app.js","app/actions/messages.js","app/actions/threads.js","app/components/App.jsx","app/components/MessageComposer.jsx","app/components/MessageListItem.jsx","app/components/MessageSection.jsx","app/components/ThreadListItem.jsx","app/components/ThreadSection.jsx","app/config.js","app/init.js","app/lib/request.js","app/lib/utils.js","app/routes.jsx","app/stores/app.js","app/stores/messages.js","app/stores/threads.js","app/stores/unreadThread.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApnDA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9DA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzDA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AAAA;CCAA;AAAA;AAAA;AAAA","file":"public/javascripts/app.js","sourcesContent":["var actions = Exim.createActions([\n  'start'\n]);\n\nmodule.exports = actions;\n","var actions = Exim.createActions([\n  'recieveMessages',\n  'createMessage'\n]);\n\nmodule.exports = actions;\n","var actions = Exim.createActions([\n  'recieveThreads',\n  'updateCurrent',\n  'updateLast',\n  'updateUnread'\n]);\n\nmodule.exports = actions;\n","var ThreadSection  = require(\"./ThreadSection\");\nvar MessageSection = require(\"./MessageSection\");\nvar RouteHandler   = ReactRouter.RouteHandler;\n\nApp = React.createClass({displayName: 'App',\n  render: function () {\n    return (\n      React.createElement(\"div\", {className: \"chatapp\"}, \n        React.createElement(ThreadSection, null), \n        React.createElement(RouteHandler, null)\n      )\n    )\n  }\n})\n\nmodule.exports = App\n","var ENTER_KEY_CODE = 13;\nvar messagesActions = require(\"actions/messages\");\n\nvar MessageComposer = React.createClass({displayName: 'MessageComposer',\n  getInitialState: function() {\n    return {text: ''};\n  },\n\n  onChange: function(event, value) {\n    this.setState({text: event.target.value});\n  },\n\n  onKeyDown: function(event) {\n    if (event.keyCode === ENTER_KEY_CODE) {\n      event.preventDefault();\n      var text = this.state.text.trim();\n      if (text) {\n        messagesActions.createMessage(text);\n      }\n      this.setState({text: ''});\n    }\n  },\n\n  render: function() {\n    return (\n      React.createElement(\"textarea\", {\n        className: \"message-composer\", \n        name: \"message\", \n        value: this.state.text, \n        onChange: this.onChange, \n        onKeyDown: this.onKeyDown}\n      )\n    );\n  }\n});\n\nmodule.exports = MessageComposer;\n","var MessageListItem = React.createClass({displayName: 'MessageListItem',\n  propTypes: {\n    message: React.PropTypes.object\n  },\n\n  render: function() {\n    var message = this.props.message;\n    return (\n      React.createElement(\"li\", {className: \"message-list-item\"}, \n        React.createElement(\"h5\", {className: \"message-author-name\"}, message.authorName), \n        React.createElement(\"div\", {className: \"message-time\"}, \n          message.date.toLocaleTimeString()\n        ), \n        React.createElement(\"div\", {className: \"message-text\"}, message.text)\n      )\n    );\n  }\n});\n\nmodule.exports = MessageListItem;\n","var MessageListItem = require(\"./MessageListItem\");\nvar MessageComposer = require(\"./MessageComposer\");\nvar messagesActions = require(\"actions/messages\");\nvar messagesStore   = require(\"stores/messages\");\nvar threadActions   = require(\"actions/threads\");\nvar threadStore     = require(\"stores/threads\");\n\nvar MessageSection = React.createClass({displayName: 'MessageSection',\n  mixins: [\n    ReactRouter.State,\n    Exim.connect(messagesStore, 'messages'),\n    Exim.connect(threadStore, 'currentID')\n  ],\n\n  statics: {\n    willTransitionTo: function (transition, params) {\n      if (params && params.id) {\n        threadActions.updateCurrent(params.id);\n        messagesActions.recieveMessages();\n      }\n    }\n  },\n\n  componentDidUpdate: function () {\n    this.scrollToBottom();\n  },\n\n  updateUnread: function () {\n    var id = this.getParams().id;\n    var thread = threadStore.get('threads')[id];\n    if (!thread.lastMessage.isRead) {\n      threadActions.updateUnread(id);\n    }\n  },\n\n  scrollToBottom: function () {\n    var list = this.refs.messageList.getDOMNode();\n    list.scrollTop = list.scrollHeight;\n  },\n\n  render: function () {\n    var messageListItems = this.state.messages.map(function (message) {\n      return React.createElement(MessageListItem, {key: message.id, message: message})\n    });\n\n    return (\n      React.createElement(\"div\", {className: \"message-section\", onMouseMove: this.updateUnread}, \n        React.createElement(\"h3\", {className: \"message-thread-heading\"}, this.state.current), \n        React.createElement(\"ul\", {className: \"message-list\", ref: \"messageList\"}, \n          messageListItems\n        ), \n        React.createElement(MessageComposer, null)\n      )\n    );\n  }\n})\n\nmodule.exports = MessageSection\n","var Link = ReactRouter.Link;\nvar State = ReactRouter.State;\n\nvar ListItem = React.createClass({displayName: 'ListItem',\n  mixins: [ State ],\n\n  render: function () {\n    var isActive = this.isActive(this.props.to, this.props.params, this.props.query);\n    var className = isActive ? ' active ' : '';\n    if (cls = this.props.className) {\n      className += cls;\n      this.props.className = '';\n    }\n    var link = Link(this.props);\n    return (\n      React.createElement(\"li\", {className: className}, link)\n    )\n  }\n});\n\nvar ThreadListItem = React.createClass({displayName: 'ThreadListItem',\n  mixins: [ State ],\n\n  propTypes: {\n    thread: React.PropTypes.object,\n    currentThreadID: React.PropTypes.string\n  },\n\n  render: function () {\n    var thread = this.props.thread\n    var lastMessage = thread.lastMessage;\n    var className = Exim.cx({\n      'thread-list-item': true,\n      'unread': !lastMessage.isRead\n    })\n\n    return (\n      React.createElement(ListItem, {className: className, to: \"message\", params: {id: thread.id}}, \n        React.createElement(\"h5\", {className: \"thread-name\"}, thread.name), \n        React.createElement(\"div\", {className: \"thread-time\"}, \n          lastMessage.date.toLocaleTimeString()\n        ), \n        React.createElement(\"div\", {className: \"thread-last-message\"}, \n          lastMessage.text\n        )\n      )\n    )\n  }\n})\n\nmodule.exports = ThreadListItem\n","var ThreadListItem = require('./ThreadListItem');\nvar threadsActions = require('actions/threads');\nvar threadsStore   = require('stores/threads');\n\nvar ThreadSection = React.createClass({displayName: 'ThreadSection',\n  mixins: [Exim.connect(threadsStore, 'threads', 'unread')],\n\n  componentWillMount: function () {\n    threadsActions.recieveThreads();\n  },\n\n  render: function() {\n    var threads = this.state.threads\n    var compareThreads = function (a, b) {\n      if (threads[b].lastMessage && threads[a].lastMessage) {\n        return threads[b].lastMessage.date - threads[a].lastMessage.date;\n      }\n    };\n\n    var threadListItems = Object.keys(threads).sort(compareThreads).map(function(threadID) {\n      var thread = threads[threadID]\n      return (\n        React.createElement(ThreadListItem, {key: threadID, thread: thread})\n      );\n    }, this);\n\n    return (\n      React.createElement(\"div\", {className: \"thread-section\"}, \n        React.createElement(\"div\", {className: \"thread-count\"}, \n          React.createElement(\"span\", null, \"Unread threads: \", this.state.unread)\n        ), \n        React.createElement(\"ul\", {className: \"thread-list\"}, \n          threadListItems\n        )\n      )\n    );\n  }\n\n});\n\nmodule.exports = ThreadSection;\n","var config = {}\n\nmodule.exports = config\n","module.exports = function() {\n  localStorage.clear();\n  localStorage.setItem('messages', JSON.stringify([\n    {\n      id: 'm_1',\n      threadID: 't_1',\n      threadName: 'Jing and Bill',\n      authorName: 'Bill',\n      text: 'Hey Jing, want to give a Flux talk at ForwardJS?',\n      timestamp: Date.now() - 99999\n    },\n    {\n      id: 'm_2',\n      threadID: 't_1',\n      threadName: 'Jing and Bill',\n      authorName: 'Bill',\n      text: 'Seems like a pretty cool conference.',\n      timestamp: Date.now() - 89999\n    },\n    {\n      id: 'm_3',\n      threadID: 't_1',\n      threadName: 'Jing and Bill',\n      authorName: 'Jing',\n      text: 'Sounds good.  Will they be serving dessert?',\n      timestamp: Date.now() - 79999\n    },\n    {\n      id: 'm_4',\n      threadID: 't_2',\n      threadName: 'Dave and Bill',\n      authorName: 'Bill',\n      text: 'Hey Dave, want to get a beer after the conference?',\n      timestamp: Date.now() - 69999\n    },\n    {\n      id: 'm_5',\n      threadID: 't_2',\n      threadName: 'Dave and Bill',\n      authorName: 'Dave',\n      text: 'Totally!  Meet you at the hotel bar.',\n      timestamp: Date.now() - 59999\n    },\n    {\n      id: 'm_6',\n      threadID: 't_3',\n      threadName: 'Functional Heads',\n      authorName: 'Bill',\n      text: 'Hey Brian, are you going to be talking about functional stuff?',\n      timestamp: Date.now() - 49999\n    },\n    {\n      id: 'm_7',\n      threadID: 't_3',\n      threadName: 'Bill and Brian',\n      authorName: 'Brian',\n      text: 'At ForwardJS?  Yeah, of course.  See you there!',\n      timestamp: Date.now() - 39999\n    }\n  ]));\n}\n\n","","var utils = {};\n\nutils.ready = function (fn) {\n  document.onreadystatechange = function () {\n   if (document.readyState == \"complete\") {\n      fn()\n   }\n  }\n}\n\nutils.transform = function (constants, mappings) {\n  return Object.keys(mappings).map(function (k) {\n    return [constants[k], mappings[k]];\n  })\n};\n\nutils.getAndParse = function (name) {\n  var items = localStorage.getItem(name)\n  var parsed = JSON.parse(items);\n  return parsed\n}\n\nutils.dateComparator = function (a, b) {\n  return a.date - b.date;\n}\n\nutils.dateSetter = function (message) {\n  message.date = new Date(message.timestamp);\n  return message\n};\n\nutils.getThreads = function (messages) {\n  var threads = {};\n  messages.forEach(function (message) {\n    threads[message.threadID] = {\n      id: message.threadID,\n      name: message.threadName,\n      lastMessage: message\n    };\n  })\n  return threads;\n}\n\nmodule.exports = utils;\n","var Route = ReactRouter.Route;\n\nvar mount = function (name) {\n  return require('components/' + name);\n};\n\nmodule.exports = (\n  React.createElement(Route, {handler: mount(\"App\"), path: \"/\"}, \n    React.createElement(Route, {name: \"message\", handler: mount(\"MessageSection\"), path: \"threads/:id\"})\n  )\n);\n","var actions = require('actions/app');\nvar routes  = require('routes');\nvar init    = require('init');\n\nvar store = Exim.createStore({\n  actions: actions,\n\n  willStart: function () {\n    init()\n  },\n  onStart: function () {\n    ReactRouter.run(routes, ReactRouter.HistoryLocation, function (Handler) {\n      React.render(React.createElement(Handler, null), document.body)\n    })\n  }\n})\n\nmodule.exports = store\n","var actions = require('actions/messages');\nvar threadActions = require('actions/threads')\nvar threadsStore = require('./threads');\n\nvar store = Exim.createStore({\n  actions: actions,\n\n  getInitial: function () {\n    return {\n      messages: []\n    }\n  },\n\n  willRecieveMessages: function () {\n    var threadID = threadsStore.get('currentID');\n\n    var threadFilterer = function (message) {\n      return message.threadID === threadID;\n    };\n\n    var messages = utils.getAndParse('messages');\n    return messages.filter(threadFilterer).map(utils.dateSetter).sort(utils.dateComparator);\n  },\n\n  recieveMessages: function (data) {\n    this.update({messages: data});\n  },\n\n  createMessage: {\n    will: function (text) {\n      var timestamp = Date.now();\n      return {\n        id: 'm_' + timestamp,\n        threadID: threadsStore.get('currentID'),\n        text: text,\n        isRead: true,\n        authorName: 'Bill',\n        date: new Date(timestamp),\n        timestamp: timestamp\n      }\n    },\n    on: function (message) {\n      var localStorageItems = JSON.parse(localStorage.getItem('messages'));\n      localStorageItems.push(message);\n      localStorage.setItem('messages', JSON.stringify(localStorageItems));\n      return message\n    },\n    did: function (message) {\n      var storeItems = this.get('messages');\n      storeItems.push(message);\n      this.update('messages', storeItems);\n      threadActions.updateLast(message);\n    },\n  }\n})\n\nmodule.exports = store\n","var actions = require('actions/threads');\nvar utils = require('lib/utils');\n\nvar store = Exim.createStore({\n  actions: actions,\n\n  getInitial: function () {\n    return {\n      threads: {},\n      currentID: null,\n      unread: 0\n    }\n  },\n\n  willRecieveThreads: function () {\n    var messages = utils.getAndParse('messages').map(utils.dateSetter).sort(utils.dateComparator);\n    return utils.getThreads(messages)\n  },\n\n  recieveThreads: function (threads) {\n    this.update('threads', threads)\n  },\n\n  didRecieveThreads: function () {\n    actions.updateUnread()\n  },\n\n  updateCurrent: function (id) {\n    this.update('currentID', id);\n  },\n\n  updateLast: function (message) {\n    var threads = this.get('threads');\n    var thread = threads[message.threadID];\n    thread.lastMessage = message;\n    this.update('threads', threads);\n  },\n\n  updateUnread: function (threadId, value) {\n    var lastMessage;\n    var threads = this.get('threads');\n\n    if (threadId) {\n      var thread  = threads[threadId];\n      thread.lastMessage.isRead = value || true;\n      this.update('threads', threads);\n    }\n\n    var unread = 0;\n    for (key in threads) {\n      if (lastMessage = threads[key].lastMessage) {\n        if (!lastMessage.isRead) unread++;\n      }\n    }\n    this.update('unread', unread);\n  }\n\n})\n\nmodule.exports = store\n",""]}